{"version":3,"sources":["webpack://web-application-demo/./node_modules/express/lib|sync","webpack://web-application-demo/./server/main.ts","webpack://web-application-demo/./server/repository/Profile/index.ts","webpack://web-application-demo/ignored|./extend-node","webpack://web-application-demo/ignored|./streams","webpack://web-application-demo/ignored|http"],"names":[],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;;;;;;;;;ACRmC;AACV;AACI;AACQ;AACM;AAC3C;AACA;AACA,IAAI,6CAAgB,OAAO,kDAAkD;AAC7E,4BAA4B,UAAU,EAAE;AACxC,aAAa,gDAAmB;AAChC;AACA;AACA;AACA,KAAK;AACL;AACA,UAAU,oCAAO;AACjB;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,qBAAqB,mIAAY;AACjC;AACA;AACA,iBAAiB,iIAAmB,CAAC,mIAAY;AACjD;AACA,CAAC;AACD,4DAAO,MAAM,qCAAQ;;;;;;;;;;;;;;;;;;ACrCrB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,iEAAe,OAAO,EAAC;;;;;;;;;;;;;ACnBvB,e;;;;;;;;;;;;ACAA,e;;;;;;;;;;;;ACAA,e","file":"6c3cfcd24c.index.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => [];\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = \"./node_modules/express/lib sync recursive\";\nmodule.exports = webpackEmptyContext;","import * as express from 'express';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as mongoose from \"mongoose\";\nimport Profile from \"./repository/Profile\";\nvar initDB = function () {\n    var uri = \"mongodb+srv://admin:admin@cluster0.74fjw.gcp.mongodb.net/demo?retryWrites=true&w=majority\";\n    mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true })\n        .then(function (r) { return r; });\n    var db = mongoose.connection;\n    db.on('error', console.error.bind(console, 'connection error:'));\n    db.once('open', function () {\n        console.log(\"we're connected!\");\n    });\n};\nvar app = express();\nvar port = 8000;\ninitDB();\napp.listen(port, function () {\n    console.log('App is listening ' + port);\n});\n/**\n * root path\n * */\napp.get('/', function (req, res) {\n    res.send('Hello World!');\n});\n/**\n * this is for mock server.\n * */\napp.get('/json/:name', function (req, res, next) {\n    var sourcePath = path.resolve('src/json/');\n    var name = req.params['name'];\n    // const param = req.query['p'];\n    var stream = fs.createReadStream(path.resolve(sourcePath, name + \".json\"));\n    stream.pipe(res);\n});\nProfile(app, mongoose);\n","var path = \"/Profile\";\nvar Profile = function (app, mongoose) {\n    app.get(path, function (req, response, next) {\n        //todo: implement get method\n        response.send(\"Get request on \" + req.baseUrl + path);\n    });\n    app.post(path, function (req, response, next) {\n        //todo: implement post method\n        response.send(\"Post request on \" + req.baseUrl + path);\n    });\n    app.put(path, function (req, response, next) {\n        //todo: implement put method\n        response.send(\"Put request on \" + req.baseUrl + path);\n    });\n    app.delete(path, function (req, response, next) {\n        //todo: implement delete method\n        response.send(\"Delete request on \" + req.baseUrl + path);\n    });\n};\nexport default Profile;\n","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"sourceRoot":""}