{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport invariant from 'tiny-invariant';\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar chainIdToNetwork = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  100: 'xdai'\n};\n\nvar SquarelinkConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(SquarelinkConnector, _AbstractConnector);\n\n  function SquarelinkConnector(_ref) {\n    var _this;\n\n    var clientId = _ref.clientId,\n        networks = _ref.networks,\n        _ref$options = _ref.options,\n        options = _ref$options === void 0 ? {} : _ref$options;\n    var chainIds = networks.map(function (n) {\n      return typeof n === 'number' ? n : n.chainId;\n    });\n    !chainIds.every(function (c) {\n      return !!chainIdToNetwork[c];\n    }) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"One or more unsupported networks \" + networks) : invariant(false) : void 0;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: chainIds\n    }) || this;\n    _this.clientId = clientId;\n    _this.networks = networks;\n    _this.options = options;\n    return _this;\n  }\n\n  var _proto = SquarelinkConnector.prototype;\n\n  _proto.activate = function activate() {\n    try {\n      var _temp3 = function _temp3() {\n        return Promise.resolve(_this3.squarelink.getProvider()).then(function (provider) {\n          return Promise.resolve(provider.enable().then(function (accounts) {\n            return accounts[0];\n          })).then(function (account) {\n            return {\n              provider: provider,\n              account: account\n            };\n          });\n        });\n      };\n\n      var _this3 = this;\n\n      var _temp4 = function () {\n        if (!_this3.squarelink) {\n          return Promise.resolve(import('squarelink').then(function (m) {\n            var _m$default;\n\n            return (_m$default = m == null ? void 0 : m[\"default\"]) != null ? _m$default : m;\n          })).then(function (Squarelink) {\n            _this3.squarelink = new Squarelink(_this3.clientId, typeof _this3.networks[0] === 'number' ? chainIdToNetwork[_this3.networks[0]] : _this3.networks[0], _this3.options);\n          });\n        }\n      }();\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n\n      return Promise.resolve(_this5.squarelink.getProvider());\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n\n      return Promise.resolve(_this7.squarelink.getProvider().then(function (provider) {\n        return provider.send('eth_chainId');\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n\n      return Promise.resolve(_this9.squarelink.getProvider().then(function (provider) {\n        return provider.send('eth_accounts').then(function (accounts) {\n          return accounts[0];\n        });\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {};\n\n  return SquarelinkConnector;\n}(AbstractConnector);\n\nexport { SquarelinkConnector };","map":{"version":3,"sources":["../src/index.ts"],"names":["chainIdToNetwork","SquarelinkConnector","clientId","networks","options","chainIds","n","supportedChainIds","squarelink","Squarelink","m","provider","account","accounts","deactivate"],"mappings":"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","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  100: 'xdai'\n}\n\ntype Network = number | { chainId: number; [key: string]: any }\n\ninterface SquarelinkConnectorArguments {\n  clientId: string\n  networks: Network[]\n  options?: any\n}\n\nexport class SquarelinkConnector extends AbstractConnector {\n  private readonly clientId: string\n  private readonly networks: Network[]\n  private readonly options: any\n\n  public squarelink: any\n\n  constructor({ clientId, networks, options = {} }: SquarelinkConnectorArguments) {\n    const chainIds = networks.map((n): number => (typeof n === 'number' ? n : n.chainId))\n    invariant(\n      chainIds.every((c): boolean => !!chainIdToNetwork[c]),\n      `One or more unsupported networks ${networks}`\n    )\n    super({ supportedChainIds: chainIds })\n\n    this.clientId = clientId\n    this.networks = networks\n    this.options = options\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.squarelink) {\n      const Squarelink = await import('squarelink').then(m => m?.default ?? m)\n      this.squarelink = new Squarelink(\n        this.clientId,\n        typeof this.networks[0] === 'number' ? chainIdToNetwork[this.networks[0]] : this.networks[0],\n        this.options\n      )\n    }\n\n    const provider = await this.squarelink.getProvider()\n\n    const account = await provider.enable().then((accounts: string[]): string => accounts[0])\n\n    return { provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.squarelink.getProvider()\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.squarelink.getProvider().then((provider: any) => provider.send('eth_chainId'))\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.squarelink\n      .getProvider()\n      .then((provider: any) => provider.send('eth_accounts').then((accounts: string[]): string => accounts[0]))\n  }\n\n  public deactivate() {}\n}\n"]},"metadata":{},"sourceType":"module"}