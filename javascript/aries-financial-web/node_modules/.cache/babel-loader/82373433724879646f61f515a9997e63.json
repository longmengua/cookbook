{"ast":null,"code":"'use strict';\n\nvar format = require('ethjs-format');\n\nvar EthRPC = require('ethjs-rpc');\n\nvar promiseToCallback = require('promise-to-callback');\n\nmodule.exports = Eth;\n\nfunction Eth(provider, options) {\n  var self = this;\n  var optionsObject = options || {};\n\n  if (!(this instanceof Eth)) {\n    throw new Error('[ethjs-query] the Eth object requires the \"new\" flag in order to function normally (i.e. `const eth = new Eth(provider);`).');\n  }\n\n  if (typeof provider !== 'object') {\n    throw new Error('[ethjs-query] the Eth object requires that the first input \\'provider\\' must be an object, got \\'' + typeof provider + '\\' (i.e. \\'const eth = new Eth(provider);\\')');\n  }\n\n  self.options = Object.assign({\n    debug: optionsObject.debug || false,\n    logger: optionsObject.logger || console,\n    jsonSpace: optionsObject.jsonSpace || 0\n  });\n  self.rpc = new EthRPC(provider);\n  self.setProvider = self.rpc.setProvider;\n}\n\nEth.prototype.log = function log(message) {\n  var self = this;\n  if (self.options.debug) self.options.logger.log('[ethjs-query log] ' + message);\n};\n\nObject.keys(format.schema.methods).forEach(function (rpcMethodName) {\n  Object.defineProperty(Eth.prototype, rpcMethodName.replace('eth_', ''), {\n    enumerable: true,\n    value: generateFnFor(rpcMethodName, format.schema.methods[rpcMethodName])\n  });\n});\n\nfunction generateFnFor(rpcMethodName, methodObject) {\n  return function outputMethod() {\n    var callback = null; // eslint-disable-line\n\n    var inputs = null; // eslint-disable-line\n\n    var inputError = null; // eslint-disable-line\n\n    var self = this;\n    var args = [].slice.call(arguments); // eslint-disable-line\n\n    var protoMethodName = rpcMethodName.replace('eth_', ''); // eslint-disable-line\n\n    if (args.length > 0 && typeof args[args.length - 1] === 'function') {\n      callback = args.pop();\n    }\n\n    var promise = performCall.call(this); // if callback provided, convert promise to callback\n\n    if (callback) {\n      return promiseToCallback(promise)(callback);\n    } // only return promise if no callback provided\n\n\n    return promise;\n\n    function performCall() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        // validate arg length\n        if (args.length < methodObject[2]) {\n          reject(new Error('[ethjs-query] method \\'' + protoMethodName + '\\' requires at least ' + methodObject[2] + ' input (format type ' + methodObject[0][0] + '), ' + args.length + ' provided. For more information visit: https://github.com/ethereum/wiki/wiki/JSON-RPC#' + rpcMethodName.toLowerCase()));\n          return;\n        }\n\n        if (args.length > methodObject[0].length) {\n          reject(new Error('[ethjs-query] method \\'' + protoMethodName + '\\' requires at most ' + methodObject[0].length + ' params, ' + args.length + ' provided \\'' + JSON.stringify(args, null, self.options.jsonSpace) + '\\'. For more information visit: https://github.com/ethereum/wiki/wiki/JSON-RPC#' + rpcMethodName.toLowerCase()));\n          return;\n        } // set default block\n\n\n        if (methodObject[3] && args.length < methodObject[3]) {\n          args.push('latest');\n        } // format inputs\n\n\n        _this.log('attempting method formatting for \\'' + protoMethodName + '\\' with inputs ' + JSON.stringify(args, null, _this.options.jsonSpace));\n\n        try {\n          inputs = format.formatInputs(rpcMethodName, args);\n\n          _this.log('method formatting success for \\'' + protoMethodName + '\\' with formatted result: ' + JSON.stringify(inputs, null, _this.options.jsonSpace));\n        } catch (formattingError) {\n          reject(new Error('[ethjs-query] while formatting inputs \\'' + JSON.stringify(args, null, _this.options.jsonSpace) + '\\' for method \\'' + protoMethodName + '\\' error: ' + formattingError));\n          return;\n        } // perform rpc call\n\n\n        _this.rpc.sendAsync({\n          method: rpcMethodName,\n          params: inputs\n        }).then(function (result) {\n          // format result\n          try {\n            _this.log('attempting method formatting for \\'' + protoMethodName + '\\' with raw outputs: ' + JSON.stringify(result, null, _this.options.jsonSpace));\n\n            var methodOutputs = format.formatOutputs(rpcMethodName, result);\n\n            _this.log('method formatting success for \\'' + protoMethodName + '\\' formatted result: ' + JSON.stringify(methodOutputs, null, _this.options.jsonSpace));\n\n            resolve(methodOutputs);\n            return;\n          } catch (outputFormattingError) {\n            var outputError = new Error('[ethjs-query] while formatting outputs from RPC \\'' + JSON.stringify(result, null, _this.options.jsonSpace) + '\\' for method \\'' + protoMethodName + '\\' ' + outputFormattingError);\n            reject(outputError);\n            return;\n          }\n        })['catch'](function (error) {\n          var outputError = new Error('[ethjs-query] while formatting outputs from RPC \\'' + JSON.stringify(error, null, _this.options.jsonSpace) + '\\'');\n          reject(outputError);\n          return;\n        });\n      });\n    }\n  };\n}","map":{"version":3,"sources":["/Users/waltorhuang/cookbook/javascript/aries-financial-web/node_modules/ethjs-query/lib/index.js"],"names":["format","require","EthRPC","promiseToCallback","module","exports","Eth","provider","options","self","optionsObject","Error","Object","assign","debug","logger","console","jsonSpace","rpc","setProvider","prototype","log","message","keys","schema","methods","forEach","rpcMethodName","defineProperty","replace","enumerable","value","generateFnFor","methodObject","outputMethod","callback","inputs","inputError","args","slice","call","arguments","protoMethodName","length","pop","promise","performCall","_this","Promise","resolve","reject","toLowerCase","JSON","stringify","push","formatInputs","formattingError","sendAsync","method","params","then","result","methodOutputs","formatOutputs","outputFormattingError","outputError","error"],"mappings":"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","sourcesContent":["'use strict';\n\nvar format = require('ethjs-format');\nvar EthRPC = require('ethjs-rpc');\nvar promiseToCallback = require('promise-to-callback');\n\nmodule.exports = Eth;\n\nfunction Eth(provider, options) {\n  var self = this;\n  var optionsObject = options || {};\n\n  if (!(this instanceof Eth)) {\n    throw new Error('[ethjs-query] the Eth object requires the \"new\" flag in order to function normally (i.e. `const eth = new Eth(provider);`).');\n  }\n  if (typeof provider !== 'object') {\n    throw new Error('[ethjs-query] the Eth object requires that the first input \\'provider\\' must be an object, got \\'' + typeof provider + '\\' (i.e. \\'const eth = new Eth(provider);\\')');\n  }\n\n  self.options = Object.assign({\n    debug: optionsObject.debug || false,\n    logger: optionsObject.logger || console,\n    jsonSpace: optionsObject.jsonSpace || 0\n  });\n  self.rpc = new EthRPC(provider);\n  self.setProvider = self.rpc.setProvider;\n}\n\nEth.prototype.log = function log(message) {\n  var self = this;\n  if (self.options.debug) self.options.logger.log('[ethjs-query log] ' + message);\n};\n\nObject.keys(format.schema.methods).forEach(function (rpcMethodName) {\n  Object.defineProperty(Eth.prototype, rpcMethodName.replace('eth_', ''), {\n    enumerable: true,\n    value: generateFnFor(rpcMethodName, format.schema.methods[rpcMethodName])\n  });\n});\n\nfunction generateFnFor(rpcMethodName, methodObject) {\n  return function outputMethod() {\n    var callback = null; // eslint-disable-line\n    var inputs = null; // eslint-disable-line\n    var inputError = null; // eslint-disable-line\n    var self = this;\n    var args = [].slice.call(arguments); // eslint-disable-line\n    var protoMethodName = rpcMethodName.replace('eth_', ''); // eslint-disable-line\n\n    if (args.length > 0 && typeof args[args.length - 1] === 'function') {\n      callback = args.pop();\n    }\n\n    var promise = performCall.call(this);\n\n    // if callback provided, convert promise to callback\n    if (callback) {\n      return promiseToCallback(promise)(callback);\n    }\n\n    // only return promise if no callback provided\n    return promise;\n\n    function performCall() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        // validate arg length\n        if (args.length < methodObject[2]) {\n          reject(new Error('[ethjs-query] method \\'' + protoMethodName + '\\' requires at least ' + methodObject[2] + ' input (format type ' + methodObject[0][0] + '), ' + args.length + ' provided. For more information visit: https://github.com/ethereum/wiki/wiki/JSON-RPC#' + rpcMethodName.toLowerCase()));\n          return;\n        }\n        if (args.length > methodObject[0].length) {\n          reject(new Error('[ethjs-query] method \\'' + protoMethodName + '\\' requires at most ' + methodObject[0].length + ' params, ' + args.length + ' provided \\'' + JSON.stringify(args, null, self.options.jsonSpace) + '\\'. For more information visit: https://github.com/ethereum/wiki/wiki/JSON-RPC#' + rpcMethodName.toLowerCase()));\n          return;\n        }\n\n        // set default block\n        if (methodObject[3] && args.length < methodObject[3]) {\n          args.push('latest');\n        }\n\n        // format inputs\n        _this.log('attempting method formatting for \\'' + protoMethodName + '\\' with inputs ' + JSON.stringify(args, null, _this.options.jsonSpace));\n        try {\n          inputs = format.formatInputs(rpcMethodName, args);\n          _this.log('method formatting success for \\'' + protoMethodName + '\\' with formatted result: ' + JSON.stringify(inputs, null, _this.options.jsonSpace));\n        } catch (formattingError) {\n          reject(new Error('[ethjs-query] while formatting inputs \\'' + JSON.stringify(args, null, _this.options.jsonSpace) + '\\' for method \\'' + protoMethodName + '\\' error: ' + formattingError));\n          return;\n        }\n\n        // perform rpc call\n        _this.rpc.sendAsync({ method: rpcMethodName, params: inputs }).then(function (result) {\n          // format result\n          try {\n            _this.log('attempting method formatting for \\'' + protoMethodName + '\\' with raw outputs: ' + JSON.stringify(result, null, _this.options.jsonSpace));\n            var methodOutputs = format.formatOutputs(rpcMethodName, result);\n            _this.log('method formatting success for \\'' + protoMethodName + '\\' formatted result: ' + JSON.stringify(methodOutputs, null, _this.options.jsonSpace));\n            resolve(methodOutputs);\n            return;\n          } catch (outputFormattingError) {\n            var outputError = new Error('[ethjs-query] while formatting outputs from RPC \\'' + JSON.stringify(result, null, _this.options.jsonSpace) + '\\' for method \\'' + protoMethodName + '\\' ' + outputFormattingError);\n            reject(outputError);\n            return;\n          }\n        })['catch'](function (error) {\n          var outputError = new Error('[ethjs-query] while formatting outputs from RPC \\'' + JSON.stringify(error, null, _this.options.jsonSpace) + '\\'');\n          reject(outputError);\n          return;\n        });\n      });\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}